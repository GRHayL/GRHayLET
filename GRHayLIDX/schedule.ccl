# Schedule definitions for thorn GRHayLIDX

if (CCTK_Equals(initial_hydro, "HydroTest1D")) {
  schedule GRHayLIDX_1D_tests_hydro_data in HydroBaseX_InitialData
  {
    LANG: C
    WRITES: HydroBaseX::rho(everywhere), HydroBaseX::press(everywhere),
            HydroBaseX::eps(everywhere), HydroBaseX::vel(everywhere)
  } "Set initial hydrodynamic data for 1D test"

  if (initialize_magnetic_quantities) {
    schedule GRHayLIDX_1D_tests_magnetic_data in HydroBaseX_InitialData after GRHayLIDX_1D_tests_hydro_data
    {
      LANG: C
      WRITES: HydroBaseX::Avecx(everywhere), HydroBaseX::Avecy(everywhere),
              HydroBaseX::Avecz(everywhere), HydroBaseX::Bvec(everywhere)
    } "Set initial magnetic data for 1D test"
  }
} else if (CCTK_Equals(initial_hydro, "IsotropicGas")) {
  schedule GRHayLIDX_IsotropicGas in HydroBaseX_InitialData
  {
    LANG: C
    WRITES: HydroBaseX::rho(everywhere), HydroBaseX::press(everywhere),
            HydroBaseX::eps(everywhere), HydroBaseX::vel(everywhere),
            HydroBaseX::Ye(everywhere), HydroBaseX::temperature(everywhere)
  } "Set initial hydrodynamic data for 1D test"

} else if (CCTK_Equals(initial_hydro, "ConstantDensitySphere")) {
  schedule GRHayLIDX_ConstantDensitySphere in HydroBaseX_InitialData
  {
    LANG: C
    WRITES: HydroBaseX::rho(everywhere), HydroBaseX::press(everywhere),
            HydroBaseX::eps(everywhere), HydroBaseX::vel(everywhere),
            HydroBaseX::Ye(everywhere), HydroBaseX::temperature(everywhere)
  } "Set initial hydrodynamic data for 1D test"
}

if(impose_beta_equilibrium) {
  schedule GRHayLIDX_BetaEquilibrium at CCTK_INITIAL after HydroBaseX_InitialData before HydroBaseX_PostInitial as impose_beta_equilibrium
  {
    LANG: C
    READS:  HydroBaseX::rho
    WRITES: HydroBaseX::press(everywhere), HydroBaseX::eps(everywhere),
            HydroBaseX::Ye(everywhere), HydroBaseX::temperature(everywhere)
  } "Set Y_e, temperature, entropy, press, eps in neutrino free beta-equilibrium"
}

if (compute_entropy) {
  if (CCTK_EQUALS(EOS_type, "hybrid")) {
    schedule GRHayLIDX_compute_entropy_hybrid after (HydroBaseX_InitialData impose_beta_equilibrium) before HydroBaseX_PostInitial
    {
      LANG: C
      READS:  HydroBaseX::rho, HydroBaseX::press
      WRITES: HydroBaseX::entropy(everywhere)
    } "Computes entropy from density and pressure using Hybrid EOS"
  } else if (CCTK_EQUALS(EOS_type, "tabulated")) {
    schedule GRHayLIDX_compute_entropy_tabulated after (HydroBaseX_InitialData impose_beta_equilibrium) before HydroBaseX_PostInitial
    {
      LANG: C
      READS:  HydroBaseX::rho, HydroBaseX::Ye, HydroBaseX::temperature
      WRITES: HydroBaseX::entropy(everywhere)
    } "Computes entropy from density, Y_e, and temperature using Tabulated EOS"
  }
}
