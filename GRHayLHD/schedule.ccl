# Schedule for thorn GRHayLHD

# This should be done by ADMBase by setting initial_shift
STORAGE: ADMBase::shift[shift_timelevels]

STORAGE: grmhd_conservatives[3], grmhd_velocities
STORAGE: u0, grmhd_conservatives_rhs
STORAGE: grmhd_flux_temps, failure_checker

#########################################################
# BASIC SETUP
#########################################################
# Registration of MoL RHS, symmetries, and boundary conditions (for PreSync)
schedule GRHayLHD_RegisterVars in MoL_Register after BSSN_RegisterVars after lapse_RegisterVars
{
  LANG: C
  OPTIONS: META
} "Register evolved, rhs variables in GRHayLHD for MoL"

# Tells the symmetry thorn how to apply symmetries on each gridfunction
schedule GRHayLHD_InitSymBound at BASEGRID after Lapse_InitSymBound
{
  LANG: C
} "Schedule symmetries"

#########################################################
# INITIAL DATA CONVERSION
#########################################################
# Fill GRHayLHD grid functions using initial data from ADMBase and HydroBase
schedule group GRHayLHD_Prim2Con2Prim in HydroBase_Prim2ConInitial
{
} "Translate ET-generated, HydroBase-compatible initial data and convert into variables used by GRHayLHD"

# Runs everywhere. Shouldn't need to sync
schedule convert_HydroBase_to_GRHayLHD in GRHayLHD_Prim2Con2Prim
{
  LANG: C
  READS:  ADMBase::lapse, ADMBase::shift
  READS:  HydroBase::vel
  WRITES: grmhd_velocities(everywhere)
  SYNC: grmhd_velocities
} "Convert HydroBase initial data (ID) to GRHayLHD variables"

if(perturb_initial_data) {
  schedule GRHayLHD_perturb_primitives in GRHayLHD_Prim2Con2Prim after convert_HydroBase_to_GRHayLHD before GRHayLHD_prims_to_conservs
  {
    LANG: C
    READS:  HydroBase::rho, HydroBase::press, HydroBase::eps,
            HydroBase::entropy, HydroBase::Y_e, HydroBase::temperature,
            grmhd_velocities
    WRITES: grmhd_velocities(everywhere),
            HydroBase::rho(everywhere), HydroBase::press(everywhere), HydroBase::eps(everywhere),
            HydroBase::entropy, HydroBase::Y_e(everywhere), HydroBase::temperature(everywhere)
  } "perturb initial primitive data"
}

# Runs everywhere. Shouldn't need to sync
schedule GRHayLHD_prims_to_conservs in GRHayLHD_Prim2Con2Prim after convert_HydroBase_to_GRHayLHD
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift,
          HydroBase::rho, HydroBase::press, HydroBase::eps,
          HydroBase::entropy, HydroBase::Y_e, HydroBase::temperature,
          grmhd_velocities
  WRITES: grmhd_velocities(everywhere), grmhd_conservatives(everywhere),
          HydroBase::rho(everywhere), HydroBase::press(everywhere), HydroBase::eps(everywhere),
          HydroBase::entropy(everywhere), HydroBase::Y_e(everywhere), HydroBase::temperature(everywhere)
} "Compute conservative variables from primitives"

schedule GRHayLHD_conservs_to_prims in GRHayLHD_Prim2Con2Prim after GRHayLHD_prims_to_conservs
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift,
          grmhd_conservatives
  WRITES: u0(everywhere), grmhd_conservatives(everywhere), failure_checker(everywhere),
          grmhd_velocities(everywhere),
          HydroBase::rho(everywhere), HydroBase::press(everywhere), HydroBase::eps(everywhere),
          HydroBase::entropy(everywhere), HydroBase::Y_e(everywhere), HydroBase::temperature(everywhere)
} "Compute primitive variables from conservatives"

if(Convert_to_HydroBase_every) {
  schedule convert_GRHayLHD_to_HydroBase in GRHayLHD_Prim2Con2Prim after GRHayLHD_conservs_to_prims
  {
    LANG: C
    READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift,
            grmhd_velocities
    WRITES: HydroBase::vel(everywhere), HydroBase::w_lorentz(everywhere)
  } "Convert GRHayLHD-native variables to HydroBase"
}

#########################################################
# Con2Prim
#########################################################

schedule group GRHayLHD_Con2Prim in HydroBase_Con2Prim
{
} "Compute primitive variables from conservatives"

# Does MoL sync evolved variables after each substep? If so, no need for this
schedule GRHayLHD_empty_function in GRHayLHD_Con2Prim as GRHayLHD_sync_conservatives
{
  LANG: C
  SYNC: grmhd_conservatives
} "Sync conservative variable ghost zones for c2p routine"

if(perturb_every_con2prim) {
  schedule GRHayLHD_perturb_conservatives in GRHayLHD_Con2Prim after GRHayLHD_sync_conservatives before GRHayLHD_conservs_to_prims
  {
    LANG: C
    READS:  grmhd_conservatives
    WRITES: grmhd_conservatives(everywhere)
  } "Perturb conservatives before con2prim"
}

schedule GRHayLHD_conservs_to_prims in GRHayLHD_Con2Prim after GRHayLHD_sync_conservatives
{
  LANG: C
  READS:  GRID::coordinates,
          ADMBase::metric, ADMBase::lapse, ADMBase::shift,
          HydroBase::rho, HydroBase::press, HydroBase::eps,
          HydroBase::entropy, HydroBase::Y_e, HydroBase::temperature,
          grmhd_conservatives, grmhd_velocities
  WRITES: u0(everywhere), grmhd_conservatives(everywhere), failure_checker(everywhere),
          grmhd_velocities(everywhere),
          HydroBase::rho(everywhere), HydroBase::press(everywhere), HydroBase::eps(everywhere),
          HydroBase::entropy(everywhere), HydroBase::Y_e(everywhere), HydroBase::temperature(everywhere)
} "Compute primitive variables from conservatives"

# Runs everywhere. Shouldn't need to sync
schedule GRHayLHD_outer_boundaries_on_P_rho_vx_vy_vz in GRHayLHD_Con2Prim after GRHayLHD_conservs_to_prims
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift
  READS:  HydroBase::rho, HydroBase::press, HydroBase::eps,
          HydroBase::entropy, HydroBase::Y_e, HydroBase::temperature,
          grmhd_velocities
  WRITES: grmhd_conservatives(everywhere), failure_checker(everywhere),
          grmhd_velocities(everywhere),
          HydroBase::rho(everywhere), HydroBase::press(everywhere), HydroBase::eps(everywhere),
          HydroBase::entropy(everywhere), HydroBase::Y_e(everywhere), HydroBase::temperature(everywhere)
  SYNC:   grmhd_velocities, HydroBase::rho, HydroBase::press, HydroBase::entropy, HydroBase::Y_e, HydroBase::temperature
} "Apply outflow-only, flat BCs on {P,rho,vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero"

#########################################################
# Stress-energy Tensor
#########################################################

schedule GRHayLHD_compute_Tmunu in AddToTmunu
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift,
          HydroBase::rho, HydroBase::press, HydroBase::eps,
          HydroBase::entropy, HydroBase::Y_e, HydroBase::temperature,
          grmhd_velocities, u0
  WRITES: TmunuBase::stress_energy_scalar(everywhere),
          TmunuBase::stress_energy_vector(everywhere),
          TmunuBase::stress_energy_tensor(everywhere)
} "Compute stress-energy tensor"

#########################################################
# RHS EVALUATION
#########################################################

schedule group GRHayLHD_RHS in MoL_CalcRHS after (bssn_rhs shift_rhs)
{
} "Evaluate RHSs GRHD equations"

schedule GRHayLHD_evaluate_sources_rhs in GRHayLHD_RHS after GRHayLHD_enforce_detgtij_eq_1
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift, ADMBase::curv,
          HydroBase::rho, HydroBase::press, HydroBase::eps,
          HydroBase::entropy, HydroBase::Y_e, HydroBase::temperature,
          grmhd_velocities
  WRITES: grmhd_conservatives_rhs
} "Initialize RHS variables to zero and evalute extrinsic curvature source term of tau_rhs"

schedule GRHayLHD_evaluate_fluxes_rhs in GRHayLHD_RHS after GRHayLHD_evaluate_sources_rhs
{
  LANG: C
  READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift, ADMBase::curv
  READS:  HydroBase::rho, HydroBase::press, HydroBase::eps,
          HydroBase::entropy, HydroBase::Y_e, HydroBase::temperature,
          grmhd_velocities, grmhd_conservatives_rhs(interior)
  WRITES: grmhd_flux_temps, grmhd_conservatives_rhs
} "Evaluate RHSs of GRHD equations"

if( CCTK_IsThornActive("NRPyLeakageET") ) {
  schedule GRHayLHD_convert_for_NRPyLeakage in GRHayLHD_RHS after GRHayLHD_evaluate_fluxes_rhs
  {
    LANG: C
    READS:  ADMBase::lapse, ADMBase::shift,
            grmhd_velocities
    WRITES: HydroBase::vel(everywhere)
  } "Convert needed HydroBase variables for NRPyLeakage"
}

#########################################################
# Set HydroBase variables for analysis
#########################################################

if(Convert_to_HydroBase_every) {
  SCHEDULE convert_GRHayLHD_to_HydroBase at CCTK_ANALYSIS before (particle_tracerET VolumeIntegralGroup convert_to_MHD_3velocity) after ML_BSSN_evolCalcGroup
  {
    LANG: C
    OPTIONS: GLOBAL-EARLY,LOOP-LOCAL
    READS:  ADMBase::metric, ADMBase::lapse, ADMBase::shift,
            grmhd_velocities
    WRITES: HydroBase::vel(everywhere), HydroBase::w_lorentz(everywhere)
  } "Convert GRHayLHD-native variables to HydroBase"
}
