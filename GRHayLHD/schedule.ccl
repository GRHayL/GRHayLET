# Scheduler setup for GRHayLHD

STORAGE: ADMBase::metric[metric_timelevels], ADMBase::curv[metric_timelevels], ADMBase::lapse[lapse_timelevels], ADMBase::shift[shift_timelevels]

STORAGE: grmhd_conservatives[3]
STORAGE: grmhd_primitives_allbutBi,grmhd_conservatives_rhs,grmhd_flux_temps,failure_checker
STORAGE: needs_average

schedule GRHayLHD_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: META
} "Register evolved, rhs variables in GRHayLHD for MoL"

# Tells the symmetry thorn how to apply symmetries on each gridfunction:
schedule GRHayLHD_InitSymBound at BASEGRID after Lapse_InitSymBound
{
  LANG: C
} "Schedule symmetries"
####################

####################
# POSTPOSTINITIAL
# HydroBase_Con2Prim in CCTK_POSTPOSTINITIAL sets conserv to prim then
# outer boundaries (OBs, which are technically disabled). The post OB
# SYNCs actually reprolongate the conservative variables, making cons
# and prims INCONSISTENT. So here we redo the con2prim, avoiding the
# SYNC afterward, then copy the result to other timelevels"
schedule GROUP GRHayLHD_PostPostInitial at CCTK_POSTPOSTINITIAL before MoL_PostStep after HydroBase_Con2Prim
{
} "HydroBase_Con2Prim in CCTK_POSTPOSTINITIAL sets conserv to prim then outer boundaries (OBs, which are technically disabled). The post OB SYNCs actually reprolongate the conservative variables, making cons and prims INCONSISTENT. So here we redo the con2prim, avoiding the SYNC afterward, then copy the result to other timelevels"

schedule GRHayLHD_InitSymBound in GRHayLHD_PostPostInitial as postid before compute_b
{
  SYNC: grmhd_conservatives
  LANG: C
} "Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated."

# Copy data to other timelevels.
schedule GRHayLHD_PostPostInitial_Set_Symmetries__Copy_Timelevels in GRHayLHD_PostPostInitial as mhdpostid after compute_b after p2c
{
  LANG: C
} "Compute post-initialdata quantities"
####################

####################
# RHS EVALUATION
schedule group GRHayLHD_RHSs in MoL_CalcRHS
{
} "Evaluate the right-hand sides (RHSs) of the GRHD equations"

schedule GRHayLHD_tabulated_evaluate_sources_rhs in GRHayLHD_RHSs
{
  LANG: C
} "Evaluate source terms of the RHSs of GRHD equations"

schedule GRHayLHD_tabulated_evaluate_fluxes_rhs in GRHayLHD_RHSs after GRHayLHD_tabulated_evaluate_sources_rhs
{
  LANG: C
} "Evaluate flux terms of the RHSs of GRHD equations"
####################

schedule GRHayLHD_InitSymBound in HydroBase_Boundaries as Boundary_SYNCs before compute_B_postrestrict
{
  SYNC: grmhd_conservatives
  LANG: C
} "Schedule symmetries -- Actually just a placeholder function to ensure prolongations / processor syncs are done BEFORE outer boundaries are updated."

# Nontrivial primitives solve, for P,rho_b,vx,vy,vz.
schedule group GRHayLHD_Con2Prim in HydroBase_Con2Prim
{
} "Compute primitive variables from conservatives"

schedule GRHayLHD_conserv_to_prims in GRHayLHD_Con2Prim
{
  LANG: C
} "Compute primitive variables from conservatives. This is non-trivial, requiring a Newton-Raphson root-finder."

schedule GRHayLHD_outer_boundaries in GRHayLHD_Con2Prim after GRHayLHD_conserv_to_prims
{
  LANG: C
  SYNC: grmhd_primitives_allbutBi, HydroBase::rho, HydroBase::Y_e, HydroBase::temperature, HydroBase::press, HydroBase::eps, HydroBase::entropy
} "Apply outflow-only, flat BCs on {P,rho_b,vx,vy,vz}. Outflow only == velocities pointed inward from outer boundary are set to zero."

schedule GRHayLHD_compute_Tmunu in AddToTmunu
{
  LANG: C
} "Add the GR(M)HD stress-tensor to Tmunu"
##########################################################

schedule group GRHayLHD_Prim2Con2Prim in HydroBase_Prim2ConInitial
{
} "Translate ET-generated, HydroBase-compatible initial data and convert into variables used by GRHayLHD"

schedule convert_HydroBase_to_GRHayLHD in GRHayLHD_Prim2Con2Prim
{
   LANG:       C
   OPTIONS:    LOCAL
   # What the heck, let's synchronize everything!
   SYNC: GRHayLHD::grmhd_primitives_allbutBi,ADMBase::metric,ADMBase::lapse,ADMBase::shift,ADMBase::curv
} "Convert HydroBase initial data (ID) to ID that GRHayLHD can read."

schedule GRHayLHD_prims_to_conservs in GRHayLHD_Prim2Con2Prim after convert_HydroBase_to_GRHayLHD
{
  LANG: C
  SYNC: GRHayLHD::grmhd_conservatives
} "Computes conservatives from primitives"

schedule GRHayLHD_InitSymBound in GRHayLHD_Prim2Con2Prim after GRHayLHD_prims_to_conservs
{
  SYNC: GRHayLHD::grmhd_conservatives
  LANG: C
} "Schedule symmetries -- Actually just a placeholder function to ensure prolongation / processor syncs are done BEFORE the primitives solver."

schedule GRHayLHD_conserv_to_prims in GRHayLHD_Prim2Con2Prim after GRHayLHD_InitSymBound
{
  LANG: C
} "Compute primitive variables from conservatives. This is non-trivial, requiring a Newton-Raphson root-finder."

SCHEDULE convert_GRHayLHD_to_HydroBase in GRHayLHD_Prim2Con2Prim after GRHayLHD_conserv_to_prims
{
  LANG: C
} "Convert GRHayLHD-native variables to HydroBase"

SCHEDULE convert_GRHayLHD_to_HydroBase AT CCTK_ANALYSIS BEFORE compute_bi_b2_Poyn_fluxET BEFORE particle_tracerET BEFORE VolumeIntegralGroup BEFORE convert_to_MHD_3velocity AFTER ML_BSSN_evolCalcGroup
{
  OPTIONS: GLOBAL-EARLY,LOOP-LOCAL
  LANG: C
} "Convert GRHayLHD-native variables to HydroBase"

if(CCTK_IsThornActive("NRPyLeakageET"))
{
  SCHEDULE convert_GRHayLHD_to_HydroBase in MoL_PostRHS before NRPyLeakageET_MoL
  {
    LANG: C
  } "Convert GRHayLHD-native variables to HydroBase"
}
